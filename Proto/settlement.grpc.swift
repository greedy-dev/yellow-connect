//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: settlement.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Settlement_SettlementServiceClient`, then call methods of this protocol to make API calls.
public protocol Settlement_SettlementServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Settlement_SettlementServiceClientInterceptorFactoryProtocol? { get }

  func prepare(
    _ request: Settlement_PrepareRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Settlement_PrepareRequest, Settlement_PrepareResponse>

  func update(
    _ request: Settlement_SettlementStateUpdate,
    callOptions: CallOptions?
  ) -> UnaryCall<Settlement_SettlementStateUpdate, Settlement_StateConfirmation>

  func finalize(
    _ request: Settlement_FinalizeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Settlement_FinalizeRequest, Settlement_FinalizeResponse>
}

extension Settlement_SettlementServiceClientProtocol {
  public var serviceName: String {
    return "settlement.SettlementService"
  }

  /// Unary call to Prepare
  ///
  /// - Parameters:
  ///   - request: Request to send to Prepare.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func prepare(
    _ request: Settlement_PrepareRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Settlement_PrepareRequest, Settlement_PrepareResponse> {
    return self.makeUnaryCall(
      path: Settlement_SettlementServiceClientMetadata.Methods.prepare.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrepareInterceptors() ?? []
    )
  }

  /// Unary call to Update
  ///
  /// - Parameters:
  ///   - request: Request to send to Update.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func update(
    _ request: Settlement_SettlementStateUpdate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Settlement_SettlementStateUpdate, Settlement_StateConfirmation> {
    return self.makeUnaryCall(
      path: Settlement_SettlementServiceClientMetadata.Methods.update.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateInterceptors() ?? []
    )
  }

  /// Unary call to Finalize
  ///
  /// - Parameters:
  ///   - request: Request to send to Finalize.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func finalize(
    _ request: Settlement_FinalizeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Settlement_FinalizeRequest, Settlement_FinalizeResponse> {
    return self.makeUnaryCall(
      path: Settlement_SettlementServiceClientMetadata.Methods.finalize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizeInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Settlement_SettlementServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Settlement_SettlementServiceNIOClient")
public final class Settlement_SettlementServiceClient: Settlement_SettlementServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Settlement_SettlementServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Settlement_SettlementServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the settlement.SettlementService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Settlement_SettlementServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Settlement_SettlementServiceNIOClient: Settlement_SettlementServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Settlement_SettlementServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the settlement.SettlementService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Settlement_SettlementServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Settlement_SettlementServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Settlement_SettlementServiceClientInterceptorFactoryProtocol? { get }

  func makePrepareCall(
    _ request: Settlement_PrepareRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Settlement_PrepareRequest, Settlement_PrepareResponse>

  func makeUpdateCall(
    _ request: Settlement_SettlementStateUpdate,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Settlement_SettlementStateUpdate, Settlement_StateConfirmation>

  func makeFinalizeCall(
    _ request: Settlement_FinalizeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Settlement_FinalizeRequest, Settlement_FinalizeResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Settlement_SettlementServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Settlement_SettlementServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Settlement_SettlementServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePrepareCall(
    _ request: Settlement_PrepareRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Settlement_PrepareRequest, Settlement_PrepareResponse> {
    return self.makeAsyncUnaryCall(
      path: Settlement_SettlementServiceClientMetadata.Methods.prepare.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrepareInterceptors() ?? []
    )
  }

  public func makeUpdateCall(
    _ request: Settlement_SettlementStateUpdate,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Settlement_SettlementStateUpdate, Settlement_StateConfirmation> {
    return self.makeAsyncUnaryCall(
      path: Settlement_SettlementServiceClientMetadata.Methods.update.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateInterceptors() ?? []
    )
  }

  public func makeFinalizeCall(
    _ request: Settlement_FinalizeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Settlement_FinalizeRequest, Settlement_FinalizeResponse> {
    return self.makeAsyncUnaryCall(
      path: Settlement_SettlementServiceClientMetadata.Methods.finalize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Settlement_SettlementServiceAsyncClientProtocol {
  public func prepare(
    _ request: Settlement_PrepareRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Settlement_PrepareResponse {
    return try await self.performAsyncUnaryCall(
      path: Settlement_SettlementServiceClientMetadata.Methods.prepare.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrepareInterceptors() ?? []
    )
  }

  public func update(
    _ request: Settlement_SettlementStateUpdate,
    callOptions: CallOptions? = nil
  ) async throws -> Settlement_StateConfirmation {
    return try await self.performAsyncUnaryCall(
      path: Settlement_SettlementServiceClientMetadata.Methods.update.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateInterceptors() ?? []
    )
  }

  public func finalize(
    _ request: Settlement_FinalizeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Settlement_FinalizeResponse {
    return try await self.performAsyncUnaryCall(
      path: Settlement_SettlementServiceClientMetadata.Methods.finalize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Settlement_SettlementServiceAsyncClient: Settlement_SettlementServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Settlement_SettlementServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Settlement_SettlementServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Settlement_SettlementServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'prepare'.
  func makePrepareInterceptors() -> [ClientInterceptor<Settlement_PrepareRequest, Settlement_PrepareResponse>]

  /// - Returns: Interceptors to use when invoking 'update'.
  func makeUpdateInterceptors() -> [ClientInterceptor<Settlement_SettlementStateUpdate, Settlement_StateConfirmation>]

  /// - Returns: Interceptors to use when invoking 'finalize'.
  func makeFinalizeInterceptors() -> [ClientInterceptor<Settlement_FinalizeRequest, Settlement_FinalizeResponse>]
}

public enum Settlement_SettlementServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "SettlementService",
    fullName: "settlement.SettlementService",
    methods: [
      Settlement_SettlementServiceClientMetadata.Methods.prepare,
      Settlement_SettlementServiceClientMetadata.Methods.update,
      Settlement_SettlementServiceClientMetadata.Methods.finalize,
    ]
  )

  public enum Methods {
    public static let prepare = GRPCMethodDescriptor(
      name: "Prepare",
      path: "/settlement.SettlementService/Prepare",
      type: GRPCCallType.unary
    )

    public static let update = GRPCMethodDescriptor(
      name: "Update",
      path: "/settlement.SettlementService/Update",
      type: GRPCCallType.unary
    )

    public static let finalize = GRPCMethodDescriptor(
      name: "Finalize",
      path: "/settlement.SettlementService/Finalize",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Settlement_SettlementServiceProvider: CallHandlerProvider {
  var interceptors: Settlement_SettlementServiceServerInterceptorFactoryProtocol? { get }

  func prepare(request: Settlement_PrepareRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Settlement_PrepareResponse>

  func update(request: Settlement_SettlementStateUpdate, context: StatusOnlyCallContext) -> EventLoopFuture<Settlement_StateConfirmation>

  func finalize(request: Settlement_FinalizeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Settlement_FinalizeResponse>
}

extension Settlement_SettlementServiceProvider {
  public var serviceName: Substring {
    return Settlement_SettlementServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Prepare":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Settlement_PrepareRequest>(),
        responseSerializer: ProtobufSerializer<Settlement_PrepareResponse>(),
        interceptors: self.interceptors?.makePrepareInterceptors() ?? [],
        userFunction: self.prepare(request:context:)
      )

    case "Update":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Settlement_SettlementStateUpdate>(),
        responseSerializer: ProtobufSerializer<Settlement_StateConfirmation>(),
        interceptors: self.interceptors?.makeUpdateInterceptors() ?? [],
        userFunction: self.update(request:context:)
      )

    case "Finalize":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Settlement_FinalizeRequest>(),
        responseSerializer: ProtobufSerializer<Settlement_FinalizeResponse>(),
        interceptors: self.interceptors?.makeFinalizeInterceptors() ?? [],
        userFunction: self.finalize(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Settlement_SettlementServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Settlement_SettlementServiceServerInterceptorFactoryProtocol? { get }

  func prepare(
    request: Settlement_PrepareRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Settlement_PrepareResponse

  func update(
    request: Settlement_SettlementStateUpdate,
    context: GRPCAsyncServerCallContext
  ) async throws -> Settlement_StateConfirmation

  func finalize(
    request: Settlement_FinalizeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Settlement_FinalizeResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Settlement_SettlementServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Settlement_SettlementServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Settlement_SettlementServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Settlement_SettlementServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Prepare":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Settlement_PrepareRequest>(),
        responseSerializer: ProtobufSerializer<Settlement_PrepareResponse>(),
        interceptors: self.interceptors?.makePrepareInterceptors() ?? [],
        wrapping: { try await self.prepare(request: $0, context: $1) }
      )

    case "Update":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Settlement_SettlementStateUpdate>(),
        responseSerializer: ProtobufSerializer<Settlement_StateConfirmation>(),
        interceptors: self.interceptors?.makeUpdateInterceptors() ?? [],
        wrapping: { try await self.update(request: $0, context: $1) }
      )

    case "Finalize":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Settlement_FinalizeRequest>(),
        responseSerializer: ProtobufSerializer<Settlement_FinalizeResponse>(),
        interceptors: self.interceptors?.makeFinalizeInterceptors() ?? [],
        wrapping: { try await self.finalize(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Settlement_SettlementServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'prepare'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePrepareInterceptors() -> [ServerInterceptor<Settlement_PrepareRequest, Settlement_PrepareResponse>]

  /// - Returns: Interceptors to use when handling 'update'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateInterceptors() -> [ServerInterceptor<Settlement_SettlementStateUpdate, Settlement_StateConfirmation>]

  /// - Returns: Interceptors to use when handling 'finalize'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFinalizeInterceptors() -> [ServerInterceptor<Settlement_FinalizeRequest, Settlement_FinalizeResponse>]
}

public enum Settlement_SettlementServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "SettlementService",
    fullName: "settlement.SettlementService",
    methods: [
      Settlement_SettlementServiceServerMetadata.Methods.prepare,
      Settlement_SettlementServiceServerMetadata.Methods.update,
      Settlement_SettlementServiceServerMetadata.Methods.finalize,
    ]
  )

  public enum Methods {
    public static let prepare = GRPCMethodDescriptor(
      name: "Prepare",
      path: "/settlement.SettlementService/Prepare",
      type: GRPCCallType.unary
    )

    public static let update = GRPCMethodDescriptor(
      name: "Update",
      path: "/settlement.SettlementService/Update",
      type: GRPCCallType.unary
    )

    public static let finalize = GRPCMethodDescriptor(
      name: "Finalize",
      path: "/settlement.SettlementService/Finalize",
      type: GRPCCallType.unary
    )
  }
}
