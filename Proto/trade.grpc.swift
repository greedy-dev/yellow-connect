//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: trade.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service definition
/// In the protocol, Client is the Initiator, Server is the Follower
/// Initiator start with turnNum = 0 prefunding stage.
///
/// Usage: instantiate `TradeChannelClient`, then call methods of this protocol to make API calls.
public protocol TradeChannelClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: TradeChannelClientInterceptorFactoryProtocol? { get }

  func prefund(
    _ request: TradeState,
    callOptions: CallOptions?
  ) -> UnaryCall<TradeState, TradeState>

  func postfund(
    _ request: TradeState,
    callOptions: CallOptions?
  ) -> UnaryCall<TradeState, TradeState>

  func updateMargin(
    _ request: Core_SignedMarginCall,
    callOptions: CallOptions?
  ) -> UnaryCall<Core_SignedMarginCall, Core_SignedMarginCall>

  func requestSettlement(
    _ request: TradeState,
    callOptions: CallOptions?
  ) -> UnaryCall<TradeState, TradeState>

  func finalize(
    _ request: TradeState,
    callOptions: CallOptions?
  ) -> UnaryCall<TradeState, TradeState>
}

extension TradeChannelClientProtocol {
  public var serviceName: String {
    return "TradeChannel"
  }

  /// turnNum = 0
  ///
  /// - Parameters:
  ///   - request: Request to send to Prefund.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func prefund(
    _ request: TradeState,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TradeState, TradeState> {
    return self.makeUnaryCall(
      path: TradeChannelClientMetadata.Methods.prefund.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrefundInterceptors() ?? []
    )
  }

  /// turnNum = 1
  ///
  /// - Parameters:
  ///   - request: Request to send to Postfund.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postfund(
    _ request: TradeState,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TradeState, TradeState> {
    return self.makeUnaryCall(
      path: TradeChannelClientMetadata.Methods.postfund.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePostfundInterceptors() ?? []
    )
  }

  /// Unary call to UpdateMargin
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateMargin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateMargin(
    _ request: Core_SignedMarginCall,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Core_SignedMarginCall, Core_SignedMarginCall> {
    return self.makeUnaryCall(
      path: TradeChannelClientMetadata.Methods.updateMargin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateMarginInterceptors() ?? []
    )
  }

  /// TODO: Message protocol to be defined
  /// Find how to bind with Settlement SVC
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestSettlement.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func requestSettlement(
    _ request: TradeState,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TradeState, TradeState> {
    return self.makeUnaryCall(
      path: TradeChannelClientMetadata.Methods.requestSettlement.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestSettlementInterceptors() ?? []
    )
  }

  /// isFinal State
  ///
  /// - Parameters:
  ///   - request: Request to send to Finalize.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func finalize(
    _ request: TradeState,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TradeState, TradeState> {
    return self.makeUnaryCall(
      path: TradeChannelClientMetadata.Methods.finalize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizeInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension TradeChannelClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "TradeChannelNIOClient")
public final class TradeChannelClient: TradeChannelClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: TradeChannelClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: TradeChannelClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the TradeChannel service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: TradeChannelClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct TradeChannelNIOClient: TradeChannelClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: TradeChannelClientInterceptorFactoryProtocol?

  /// Creates a client for the TradeChannel service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: TradeChannelClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Service definition
/// In the protocol, Client is the Initiator, Server is the Follower
/// Initiator start with turnNum = 0 prefunding stage.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol TradeChannelAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: TradeChannelClientInterceptorFactoryProtocol? { get }

  func makePrefundCall(
    _ request: TradeState,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<TradeState, TradeState>

  func makePostfundCall(
    _ request: TradeState,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<TradeState, TradeState>

  func makeUpdateMarginCall(
    _ request: Core_SignedMarginCall,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Core_SignedMarginCall, Core_SignedMarginCall>

  func makeRequestSettlementCall(
    _ request: TradeState,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<TradeState, TradeState>

  func makeFinalizeCall(
    _ request: TradeState,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<TradeState, TradeState>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension TradeChannelAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return TradeChannelClientMetadata.serviceDescriptor
  }

  public var interceptors: TradeChannelClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePrefundCall(
    _ request: TradeState,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<TradeState, TradeState> {
    return self.makeAsyncUnaryCall(
      path: TradeChannelClientMetadata.Methods.prefund.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrefundInterceptors() ?? []
    )
  }

  public func makePostfundCall(
    _ request: TradeState,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<TradeState, TradeState> {
    return self.makeAsyncUnaryCall(
      path: TradeChannelClientMetadata.Methods.postfund.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePostfundInterceptors() ?? []
    )
  }

  public func makeUpdateMarginCall(
    _ request: Core_SignedMarginCall,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Core_SignedMarginCall, Core_SignedMarginCall> {
    return self.makeAsyncUnaryCall(
      path: TradeChannelClientMetadata.Methods.updateMargin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateMarginInterceptors() ?? []
    )
  }

  public func makeRequestSettlementCall(
    _ request: TradeState,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<TradeState, TradeState> {
    return self.makeAsyncUnaryCall(
      path: TradeChannelClientMetadata.Methods.requestSettlement.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestSettlementInterceptors() ?? []
    )
  }

  public func makeFinalizeCall(
    _ request: TradeState,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<TradeState, TradeState> {
    return self.makeAsyncUnaryCall(
      path: TradeChannelClientMetadata.Methods.finalize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension TradeChannelAsyncClientProtocol {
  public func prefund(
    _ request: TradeState,
    callOptions: CallOptions? = nil
  ) async throws -> TradeState {
    return try await self.performAsyncUnaryCall(
      path: TradeChannelClientMetadata.Methods.prefund.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrefundInterceptors() ?? []
    )
  }

  public func postfund(
    _ request: TradeState,
    callOptions: CallOptions? = nil
  ) async throws -> TradeState {
    return try await self.performAsyncUnaryCall(
      path: TradeChannelClientMetadata.Methods.postfund.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePostfundInterceptors() ?? []
    )
  }

  public func updateMargin(
    _ request: Core_SignedMarginCall,
    callOptions: CallOptions? = nil
  ) async throws -> Core_SignedMarginCall {
    return try await self.performAsyncUnaryCall(
      path: TradeChannelClientMetadata.Methods.updateMargin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateMarginInterceptors() ?? []
    )
  }

  public func requestSettlement(
    _ request: TradeState,
    callOptions: CallOptions? = nil
  ) async throws -> TradeState {
    return try await self.performAsyncUnaryCall(
      path: TradeChannelClientMetadata.Methods.requestSettlement.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestSettlementInterceptors() ?? []
    )
  }

  public func finalize(
    _ request: TradeState,
    callOptions: CallOptions? = nil
  ) async throws -> TradeState {
    return try await self.performAsyncUnaryCall(
      path: TradeChannelClientMetadata.Methods.finalize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct TradeChannelAsyncClient: TradeChannelAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: TradeChannelClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: TradeChannelClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol TradeChannelClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'prefund'.
  func makePrefundInterceptors() -> [ClientInterceptor<TradeState, TradeState>]

  /// - Returns: Interceptors to use when invoking 'postfund'.
  func makePostfundInterceptors() -> [ClientInterceptor<TradeState, TradeState>]

  /// - Returns: Interceptors to use when invoking 'updateMargin'.
  func makeUpdateMarginInterceptors() -> [ClientInterceptor<Core_SignedMarginCall, Core_SignedMarginCall>]

  /// - Returns: Interceptors to use when invoking 'requestSettlement'.
  func makeRequestSettlementInterceptors() -> [ClientInterceptor<TradeState, TradeState>]

  /// - Returns: Interceptors to use when invoking 'finalize'.
  func makeFinalizeInterceptors() -> [ClientInterceptor<TradeState, TradeState>]
}

public enum TradeChannelClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "TradeChannel",
    fullName: "TradeChannel",
    methods: [
      TradeChannelClientMetadata.Methods.prefund,
      TradeChannelClientMetadata.Methods.postfund,
      TradeChannelClientMetadata.Methods.updateMargin,
      TradeChannelClientMetadata.Methods.requestSettlement,
      TradeChannelClientMetadata.Methods.finalize,
    ]
  )

  public enum Methods {
    public static let prefund = GRPCMethodDescriptor(
      name: "Prefund",
      path: "/TradeChannel/Prefund",
      type: GRPCCallType.unary
    )

    public static let postfund = GRPCMethodDescriptor(
      name: "Postfund",
      path: "/TradeChannel/Postfund",
      type: GRPCCallType.unary
    )

    public static let updateMargin = GRPCMethodDescriptor(
      name: "UpdateMargin",
      path: "/TradeChannel/UpdateMargin",
      type: GRPCCallType.unary
    )

    public static let requestSettlement = GRPCMethodDescriptor(
      name: "RequestSettlement",
      path: "/TradeChannel/RequestSettlement",
      type: GRPCCallType.unary
    )

    public static let finalize = GRPCMethodDescriptor(
      name: "Finalize",
      path: "/TradeChannel/Finalize",
      type: GRPCCallType.unary
    )
  }
}

/// Service definition
/// In the protocol, Client is the Initiator, Server is the Follower
/// Initiator start with turnNum = 0 prefunding stage.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol TradeChannelProvider: CallHandlerProvider {
  var interceptors: TradeChannelServerInterceptorFactoryProtocol? { get }

  /// turnNum = 0
  func prefund(request: TradeState, context: StatusOnlyCallContext) -> EventLoopFuture<TradeState>

  /// turnNum = 1
  func postfund(request: TradeState, context: StatusOnlyCallContext) -> EventLoopFuture<TradeState>

  func updateMargin(request: Core_SignedMarginCall, context: StatusOnlyCallContext) -> EventLoopFuture<Core_SignedMarginCall>

  /// TODO: Message protocol to be defined
  /// Find how to bind with Settlement SVC
  func requestSettlement(request: TradeState, context: StatusOnlyCallContext) -> EventLoopFuture<TradeState>

  /// isFinal State
  func finalize(request: TradeState, context: StatusOnlyCallContext) -> EventLoopFuture<TradeState>
}

extension TradeChannelProvider {
  public var serviceName: Substring {
    return TradeChannelServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Prefund":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TradeState>(),
        responseSerializer: ProtobufSerializer<TradeState>(),
        interceptors: self.interceptors?.makePrefundInterceptors() ?? [],
        userFunction: self.prefund(request:context:)
      )

    case "Postfund":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TradeState>(),
        responseSerializer: ProtobufSerializer<TradeState>(),
        interceptors: self.interceptors?.makePostfundInterceptors() ?? [],
        userFunction: self.postfund(request:context:)
      )

    case "UpdateMargin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Core_SignedMarginCall>(),
        responseSerializer: ProtobufSerializer<Core_SignedMarginCall>(),
        interceptors: self.interceptors?.makeUpdateMarginInterceptors() ?? [],
        userFunction: self.updateMargin(request:context:)
      )

    case "RequestSettlement":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TradeState>(),
        responseSerializer: ProtobufSerializer<TradeState>(),
        interceptors: self.interceptors?.makeRequestSettlementInterceptors() ?? [],
        userFunction: self.requestSettlement(request:context:)
      )

    case "Finalize":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TradeState>(),
        responseSerializer: ProtobufSerializer<TradeState>(),
        interceptors: self.interceptors?.makeFinalizeInterceptors() ?? [],
        userFunction: self.finalize(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Service definition
/// In the protocol, Client is the Initiator, Server is the Follower
/// Initiator start with turnNum = 0 prefunding stage.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol TradeChannelAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: TradeChannelServerInterceptorFactoryProtocol? { get }

  /// turnNum = 0
  func prefund(
    request: TradeState,
    context: GRPCAsyncServerCallContext
  ) async throws -> TradeState

  /// turnNum = 1
  func postfund(
    request: TradeState,
    context: GRPCAsyncServerCallContext
  ) async throws -> TradeState

  func updateMargin(
    request: Core_SignedMarginCall,
    context: GRPCAsyncServerCallContext
  ) async throws -> Core_SignedMarginCall

  /// TODO: Message protocol to be defined
  /// Find how to bind with Settlement SVC
  func requestSettlement(
    request: TradeState,
    context: GRPCAsyncServerCallContext
  ) async throws -> TradeState

  /// isFinal State
  func finalize(
    request: TradeState,
    context: GRPCAsyncServerCallContext
  ) async throws -> TradeState
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension TradeChannelAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return TradeChannelServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return TradeChannelServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: TradeChannelServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Prefund":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TradeState>(),
        responseSerializer: ProtobufSerializer<TradeState>(),
        interceptors: self.interceptors?.makePrefundInterceptors() ?? [],
        wrapping: { try await self.prefund(request: $0, context: $1) }
      )

    case "Postfund":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TradeState>(),
        responseSerializer: ProtobufSerializer<TradeState>(),
        interceptors: self.interceptors?.makePostfundInterceptors() ?? [],
        wrapping: { try await self.postfund(request: $0, context: $1) }
      )

    case "UpdateMargin":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Core_SignedMarginCall>(),
        responseSerializer: ProtobufSerializer<Core_SignedMarginCall>(),
        interceptors: self.interceptors?.makeUpdateMarginInterceptors() ?? [],
        wrapping: { try await self.updateMargin(request: $0, context: $1) }
      )

    case "RequestSettlement":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TradeState>(),
        responseSerializer: ProtobufSerializer<TradeState>(),
        interceptors: self.interceptors?.makeRequestSettlementInterceptors() ?? [],
        wrapping: { try await self.requestSettlement(request: $0, context: $1) }
      )

    case "Finalize":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TradeState>(),
        responseSerializer: ProtobufSerializer<TradeState>(),
        interceptors: self.interceptors?.makeFinalizeInterceptors() ?? [],
        wrapping: { try await self.finalize(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol TradeChannelServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'prefund'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePrefundInterceptors() -> [ServerInterceptor<TradeState, TradeState>]

  /// - Returns: Interceptors to use when handling 'postfund'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePostfundInterceptors() -> [ServerInterceptor<TradeState, TradeState>]

  /// - Returns: Interceptors to use when handling 'updateMargin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateMarginInterceptors() -> [ServerInterceptor<Core_SignedMarginCall, Core_SignedMarginCall>]

  /// - Returns: Interceptors to use when handling 'requestSettlement'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestSettlementInterceptors() -> [ServerInterceptor<TradeState, TradeState>]

  /// - Returns: Interceptors to use when handling 'finalize'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFinalizeInterceptors() -> [ServerInterceptor<TradeState, TradeState>]
}

public enum TradeChannelServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "TradeChannel",
    fullName: "TradeChannel",
    methods: [
      TradeChannelServerMetadata.Methods.prefund,
      TradeChannelServerMetadata.Methods.postfund,
      TradeChannelServerMetadata.Methods.updateMargin,
      TradeChannelServerMetadata.Methods.requestSettlement,
      TradeChannelServerMetadata.Methods.finalize,
    ]
  )

  public enum Methods {
    public static let prefund = GRPCMethodDescriptor(
      name: "Prefund",
      path: "/TradeChannel/Prefund",
      type: GRPCCallType.unary
    )

    public static let postfund = GRPCMethodDescriptor(
      name: "Postfund",
      path: "/TradeChannel/Postfund",
      type: GRPCCallType.unary
    )

    public static let updateMargin = GRPCMethodDescriptor(
      name: "UpdateMargin",
      path: "/TradeChannel/UpdateMargin",
      type: GRPCCallType.unary
    )

    public static let requestSettlement = GRPCMethodDescriptor(
      name: "RequestSettlement",
      path: "/TradeChannel/RequestSettlement",
      type: GRPCCallType.unary
    )

    public static let finalize = GRPCMethodDescriptor(
      name: "Finalize",
      path: "/TradeChannel/Finalize",
      type: GRPCCallType.unary
    )
  }
}
