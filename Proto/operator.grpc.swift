//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: operator.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// protolint:disable MAX_LINE_LENGTH
///
/// Usage: instantiate `OperatorClient`, then call methods of this protocol to make API calls.
public protocol OperatorClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: OperatorClientInterceptorFactoryProtocol? { get }

  func getVersion(
    _ request: VersionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<VersionRequest, VersionResponse>

  func getChallenge(
    _ request: GetChallengeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetChallengeRequest, GetChallengeResponse>

  func authenticate(
    _ request: AuthenticateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<AuthenticateRequest, AuthenticateResponse>

  func openChannel(
    _ request: OpenChannelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<OpenChannelRequest, OpenChannelResponse>

  func getChannelJwt(
    _ request: GetJwtRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetJwtRequest, GetJwtResponse>

  func getPositions(
    _ request: GetPositionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetPositionsRequest, GetPositionsResponse>

  func recordTrade(
    _ request: TradeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TradeRequest, TradeResponse>

  func recordTrades(
    _ request: TradesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TradesRequest, TradesResponse>

  func requestSettlement(
    _ request: SettlementRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<SettlementRequest, SettlementResponse>

  func closeChannel(
    _ request: CloseChannelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CloseChannelRequest, CloseChannelResponse>

  func subscribeChannelsEvents(
    _ request: SubscribeRequest,
    callOptions: CallOptions?,
    handler: @escaping (Notification) -> Void
  ) -> ServerStreamingCall<SubscribeRequest, Notification>
}

extension OperatorClientProtocol {
  public var serviceName: String {
    return "Operator"
  }

  /// Unary call to GetVersion
  ///
  /// - Parameters:
  ///   - request: Request to send to GetVersion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getVersion(
    _ request: VersionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<VersionRequest, VersionResponse> {
    return self.makeUnaryCall(
      path: OperatorClientMetadata.Methods.getVersion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetVersionInterceptors() ?? []
    )
  }

  /// Unary call to GetChallenge
  ///
  /// - Parameters:
  ///   - request: Request to send to GetChallenge.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getChallenge(
    _ request: GetChallengeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetChallengeRequest, GetChallengeResponse> {
    return self.makeUnaryCall(
      path: OperatorClientMetadata.Methods.getChallenge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChallengeInterceptors() ?? []
    )
  }

  /// Unary call to Authenticate
  ///
  /// - Parameters:
  ///   - request: Request to send to Authenticate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func authenticate(
    _ request: AuthenticateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<AuthenticateRequest, AuthenticateResponse> {
    return self.makeUnaryCall(
      path: OperatorClientMetadata.Methods.authenticate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? []
    )
  }

  /// Unary call to OpenChannel
  ///
  /// - Parameters:
  ///   - request: Request to send to OpenChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func openChannel(
    _ request: OpenChannelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OpenChannelRequest, OpenChannelResponse> {
    return self.makeUnaryCall(
      path: OperatorClientMetadata.Methods.openChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOpenChannelInterceptors() ?? []
    )
  }

  /// Unary call to GetChannelJwt
  ///
  /// - Parameters:
  ///   - request: Request to send to GetChannelJwt.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getChannelJwt(
    _ request: GetJwtRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetJwtRequest, GetJwtResponse> {
    return self.makeUnaryCall(
      path: OperatorClientMetadata.Methods.getChannelJwt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChannelJwtInterceptors() ?? []
    )
  }

  /// Unary call to GetPositions
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPositions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getPositions(
    _ request: GetPositionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetPositionsRequest, GetPositionsResponse> {
    return self.makeUnaryCall(
      path: OperatorClientMetadata.Methods.getPositions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPositionsInterceptors() ?? []
    )
  }

  /// Unary call to RecordTrade
  ///
  /// - Parameters:
  ///   - request: Request to send to RecordTrade.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func recordTrade(
    _ request: TradeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TradeRequest, TradeResponse> {
    return self.makeUnaryCall(
      path: OperatorClientMetadata.Methods.recordTrade.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordTradeInterceptors() ?? []
    )
  }

  /// Unary call to RecordTrades
  ///
  /// - Parameters:
  ///   - request: Request to send to RecordTrades.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func recordTrades(
    _ request: TradesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TradesRequest, TradesResponse> {
    return self.makeUnaryCall(
      path: OperatorClientMetadata.Methods.recordTrades.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordTradesInterceptors() ?? []
    )
  }

  /// Unary call to RequestSettlement
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestSettlement.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func requestSettlement(
    _ request: SettlementRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SettlementRequest, SettlementResponse> {
    return self.makeUnaryCall(
      path: OperatorClientMetadata.Methods.requestSettlement.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestSettlementInterceptors() ?? []
    )
  }

  /// Unary call to CloseChannel
  ///
  /// - Parameters:
  ///   - request: Request to send to CloseChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func closeChannel(
    _ request: CloseChannelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CloseChannelRequest, CloseChannelResponse> {
    return self.makeUnaryCall(
      path: OperatorClientMetadata.Methods.closeChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseChannelInterceptors() ?? []
    )
  }

  /// Server streaming call to SubscribeChannelsEvents
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeChannelsEvents.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func subscribeChannelsEvents(
    _ request: SubscribeRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Notification) -> Void
  ) -> ServerStreamingCall<SubscribeRequest, Notification> {
    return self.makeServerStreamingCall(
      path: OperatorClientMetadata.Methods.subscribeChannelsEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeChannelsEventsInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension OperatorClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "OperatorNIOClient")
public final class OperatorClient: OperatorClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: OperatorClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: OperatorClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the Operator service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: OperatorClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct OperatorNIOClient: OperatorClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: OperatorClientInterceptorFactoryProtocol?

  /// Creates a client for the Operator service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: OperatorClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// protolint:disable MAX_LINE_LENGTH
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol OperatorAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: OperatorClientInterceptorFactoryProtocol? { get }

  func makeGetVersionCall(
    _ request: VersionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<VersionRequest, VersionResponse>

  func makeGetChallengeCall(
    _ request: GetChallengeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GetChallengeRequest, GetChallengeResponse>

  func makeAuthenticateCall(
    _ request: AuthenticateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<AuthenticateRequest, AuthenticateResponse>

  func makeOpenChannelCall(
    _ request: OpenChannelRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OpenChannelRequest, OpenChannelResponse>

  func makeGetChannelJwtCall(
    _ request: GetJwtRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GetJwtRequest, GetJwtResponse>

  func makeGetPositionsCall(
    _ request: GetPositionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GetPositionsRequest, GetPositionsResponse>

  func makeRecordTradeCall(
    _ request: TradeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<TradeRequest, TradeResponse>

  func makeRecordTradesCall(
    _ request: TradesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<TradesRequest, TradesResponse>

  func makeRequestSettlementCall(
    _ request: SettlementRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SettlementRequest, SettlementResponse>

  func makeCloseChannelCall(
    _ request: CloseChannelRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CloseChannelRequest, CloseChannelResponse>

  func makeSubscribeChannelsEventsCall(
    _ request: SubscribeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<SubscribeRequest, Notification>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OperatorAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return OperatorClientMetadata.serviceDescriptor
  }

  public var interceptors: OperatorClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetVersionCall(
    _ request: VersionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<VersionRequest, VersionResponse> {
    return self.makeAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.getVersion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetVersionInterceptors() ?? []
    )
  }

  public func makeGetChallengeCall(
    _ request: GetChallengeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GetChallengeRequest, GetChallengeResponse> {
    return self.makeAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.getChallenge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChallengeInterceptors() ?? []
    )
  }

  public func makeAuthenticateCall(
    _ request: AuthenticateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<AuthenticateRequest, AuthenticateResponse> {
    return self.makeAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.authenticate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? []
    )
  }

  public func makeOpenChannelCall(
    _ request: OpenChannelRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OpenChannelRequest, OpenChannelResponse> {
    return self.makeAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.openChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOpenChannelInterceptors() ?? []
    )
  }

  public func makeGetChannelJwtCall(
    _ request: GetJwtRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GetJwtRequest, GetJwtResponse> {
    return self.makeAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.getChannelJwt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChannelJwtInterceptors() ?? []
    )
  }

  public func makeGetPositionsCall(
    _ request: GetPositionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GetPositionsRequest, GetPositionsResponse> {
    return self.makeAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.getPositions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPositionsInterceptors() ?? []
    )
  }

  public func makeRecordTradeCall(
    _ request: TradeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<TradeRequest, TradeResponse> {
    return self.makeAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.recordTrade.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordTradeInterceptors() ?? []
    )
  }

  public func makeRecordTradesCall(
    _ request: TradesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<TradesRequest, TradesResponse> {
    return self.makeAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.recordTrades.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordTradesInterceptors() ?? []
    )
  }

  public func makeRequestSettlementCall(
    _ request: SettlementRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SettlementRequest, SettlementResponse> {
    return self.makeAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.requestSettlement.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestSettlementInterceptors() ?? []
    )
  }

  public func makeCloseChannelCall(
    _ request: CloseChannelRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CloseChannelRequest, CloseChannelResponse> {
    return self.makeAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.closeChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseChannelInterceptors() ?? []
    )
  }

  public func makeSubscribeChannelsEventsCall(
    _ request: SubscribeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<SubscribeRequest, Notification> {
    return self.makeAsyncServerStreamingCall(
      path: OperatorClientMetadata.Methods.subscribeChannelsEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeChannelsEventsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OperatorAsyncClientProtocol {
  public func getVersion(
    _ request: VersionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> VersionResponse {
    return try await self.performAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.getVersion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetVersionInterceptors() ?? []
    )
  }

  public func getChallenge(
    _ request: GetChallengeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> GetChallengeResponse {
    return try await self.performAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.getChallenge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChallengeInterceptors() ?? []
    )
  }

  public func authenticate(
    _ request: AuthenticateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> AuthenticateResponse {
    return try await self.performAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.authenticate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? []
    )
  }

  public func openChannel(
    _ request: OpenChannelRequest,
    callOptions: CallOptions? = nil
  ) async throws -> OpenChannelResponse {
    return try await self.performAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.openChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOpenChannelInterceptors() ?? []
    )
  }

  public func getChannelJwt(
    _ request: GetJwtRequest,
    callOptions: CallOptions? = nil
  ) async throws -> GetJwtResponse {
    return try await self.performAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.getChannelJwt.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChannelJwtInterceptors() ?? []
    )
  }

  public func getPositions(
    _ request: GetPositionsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> GetPositionsResponse {
    return try await self.performAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.getPositions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPositionsInterceptors() ?? []
    )
  }

  public func recordTrade(
    _ request: TradeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> TradeResponse {
    return try await self.performAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.recordTrade.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordTradeInterceptors() ?? []
    )
  }

  public func recordTrades(
    _ request: TradesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> TradesResponse {
    return try await self.performAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.recordTrades.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordTradesInterceptors() ?? []
    )
  }

  public func requestSettlement(
    _ request: SettlementRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SettlementResponse {
    return try await self.performAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.requestSettlement.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestSettlementInterceptors() ?? []
    )
  }

  public func closeChannel(
    _ request: CloseChannelRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CloseChannelResponse {
    return try await self.performAsyncUnaryCall(
      path: OperatorClientMetadata.Methods.closeChannel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCloseChannelInterceptors() ?? []
    )
  }

  public func subscribeChannelsEvents(
    _ request: SubscribeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Notification> {
    return self.performAsyncServerStreamingCall(
      path: OperatorClientMetadata.Methods.subscribeChannelsEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeChannelsEventsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct OperatorAsyncClient: OperatorAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: OperatorClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: OperatorClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol OperatorClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getVersion'.
  func makeGetVersionInterceptors() -> [ClientInterceptor<VersionRequest, VersionResponse>]

  /// - Returns: Interceptors to use when invoking 'getChallenge'.
  func makeGetChallengeInterceptors() -> [ClientInterceptor<GetChallengeRequest, GetChallengeResponse>]

  /// - Returns: Interceptors to use when invoking 'authenticate'.
  func makeAuthenticateInterceptors() -> [ClientInterceptor<AuthenticateRequest, AuthenticateResponse>]

  /// - Returns: Interceptors to use when invoking 'openChannel'.
  func makeOpenChannelInterceptors() -> [ClientInterceptor<OpenChannelRequest, OpenChannelResponse>]

  /// - Returns: Interceptors to use when invoking 'getChannelJwt'.
  func makeGetChannelJwtInterceptors() -> [ClientInterceptor<GetJwtRequest, GetJwtResponse>]

  /// - Returns: Interceptors to use when invoking 'getPositions'.
  func makeGetPositionsInterceptors() -> [ClientInterceptor<GetPositionsRequest, GetPositionsResponse>]

  /// - Returns: Interceptors to use when invoking 'recordTrade'.
  func makeRecordTradeInterceptors() -> [ClientInterceptor<TradeRequest, TradeResponse>]

  /// - Returns: Interceptors to use when invoking 'recordTrades'.
  func makeRecordTradesInterceptors() -> [ClientInterceptor<TradesRequest, TradesResponse>]

  /// - Returns: Interceptors to use when invoking 'requestSettlement'.
  func makeRequestSettlementInterceptors() -> [ClientInterceptor<SettlementRequest, SettlementResponse>]

  /// - Returns: Interceptors to use when invoking 'closeChannel'.
  func makeCloseChannelInterceptors() -> [ClientInterceptor<CloseChannelRequest, CloseChannelResponse>]

  /// - Returns: Interceptors to use when invoking 'subscribeChannelsEvents'.
  func makeSubscribeChannelsEventsInterceptors() -> [ClientInterceptor<SubscribeRequest, Notification>]
}

public enum OperatorClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Operator",
    fullName: "Operator",
    methods: [
      OperatorClientMetadata.Methods.getVersion,
      OperatorClientMetadata.Methods.getChallenge,
      OperatorClientMetadata.Methods.authenticate,
      OperatorClientMetadata.Methods.openChannel,
      OperatorClientMetadata.Methods.getChannelJwt,
      OperatorClientMetadata.Methods.getPositions,
      OperatorClientMetadata.Methods.recordTrade,
      OperatorClientMetadata.Methods.recordTrades,
      OperatorClientMetadata.Methods.requestSettlement,
      OperatorClientMetadata.Methods.closeChannel,
      OperatorClientMetadata.Methods.subscribeChannelsEvents,
    ]
  )

  public enum Methods {
    public static let getVersion = GRPCMethodDescriptor(
      name: "GetVersion",
      path: "/Operator/GetVersion",
      type: GRPCCallType.unary
    )

    public static let getChallenge = GRPCMethodDescriptor(
      name: "GetChallenge",
      path: "/Operator/GetChallenge",
      type: GRPCCallType.unary
    )

    public static let authenticate = GRPCMethodDescriptor(
      name: "Authenticate",
      path: "/Operator/Authenticate",
      type: GRPCCallType.unary
    )

    public static let openChannel = GRPCMethodDescriptor(
      name: "OpenChannel",
      path: "/Operator/OpenChannel",
      type: GRPCCallType.unary
    )

    public static let getChannelJwt = GRPCMethodDescriptor(
      name: "GetChannelJwt",
      path: "/Operator/GetChannelJwt",
      type: GRPCCallType.unary
    )

    public static let getPositions = GRPCMethodDescriptor(
      name: "GetPositions",
      path: "/Operator/GetPositions",
      type: GRPCCallType.unary
    )

    public static let recordTrade = GRPCMethodDescriptor(
      name: "RecordTrade",
      path: "/Operator/RecordTrade",
      type: GRPCCallType.unary
    )

    public static let recordTrades = GRPCMethodDescriptor(
      name: "RecordTrades",
      path: "/Operator/RecordTrades",
      type: GRPCCallType.unary
    )

    public static let requestSettlement = GRPCMethodDescriptor(
      name: "RequestSettlement",
      path: "/Operator/RequestSettlement",
      type: GRPCCallType.unary
    )

    public static let closeChannel = GRPCMethodDescriptor(
      name: "CloseChannel",
      path: "/Operator/CloseChannel",
      type: GRPCCallType.unary
    )

    public static let subscribeChannelsEvents = GRPCMethodDescriptor(
      name: "SubscribeChannelsEvents",
      path: "/Operator/SubscribeChannelsEvents",
      type: GRPCCallType.serverStreaming
    )
  }
}

/// protolint:disable MAX_LINE_LENGTH
///
/// To build a server, implement a class that conforms to this protocol.
public protocol OperatorProvider: CallHandlerProvider {
  var interceptors: OperatorServerInterceptorFactoryProtocol? { get }

  func getVersion(request: VersionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<VersionResponse>

  func getChallenge(request: GetChallengeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetChallengeResponse>

  func authenticate(request: AuthenticateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<AuthenticateResponse>

  func openChannel(request: OpenChannelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<OpenChannelResponse>

  func getChannelJwt(request: GetJwtRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetJwtResponse>

  func getPositions(request: GetPositionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetPositionsResponse>

  func recordTrade(request: TradeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<TradeResponse>

  func recordTrades(request: TradesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<TradesResponse>

  func requestSettlement(request: SettlementRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SettlementResponse>

  func closeChannel(request: CloseChannelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CloseChannelResponse>

  func subscribeChannelsEvents(request: SubscribeRequest, context: StreamingResponseCallContext<Notification>) -> EventLoopFuture<GRPCStatus>
}

extension OperatorProvider {
  public var serviceName: Substring {
    return OperatorServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetVersion":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<VersionRequest>(),
        responseSerializer: ProtobufSerializer<VersionResponse>(),
        interceptors: self.interceptors?.makeGetVersionInterceptors() ?? [],
        userFunction: self.getVersion(request:context:)
      )

    case "GetChallenge":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetChallengeRequest>(),
        responseSerializer: ProtobufSerializer<GetChallengeResponse>(),
        interceptors: self.interceptors?.makeGetChallengeInterceptors() ?? [],
        userFunction: self.getChallenge(request:context:)
      )

    case "Authenticate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<AuthenticateRequest>(),
        responseSerializer: ProtobufSerializer<AuthenticateResponse>(),
        interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? [],
        userFunction: self.authenticate(request:context:)
      )

    case "OpenChannel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OpenChannelRequest>(),
        responseSerializer: ProtobufSerializer<OpenChannelResponse>(),
        interceptors: self.interceptors?.makeOpenChannelInterceptors() ?? [],
        userFunction: self.openChannel(request:context:)
      )

    case "GetChannelJwt":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetJwtRequest>(),
        responseSerializer: ProtobufSerializer<GetJwtResponse>(),
        interceptors: self.interceptors?.makeGetChannelJwtInterceptors() ?? [],
        userFunction: self.getChannelJwt(request:context:)
      )

    case "GetPositions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetPositionsRequest>(),
        responseSerializer: ProtobufSerializer<GetPositionsResponse>(),
        interceptors: self.interceptors?.makeGetPositionsInterceptors() ?? [],
        userFunction: self.getPositions(request:context:)
      )

    case "RecordTrade":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TradeRequest>(),
        responseSerializer: ProtobufSerializer<TradeResponse>(),
        interceptors: self.interceptors?.makeRecordTradeInterceptors() ?? [],
        userFunction: self.recordTrade(request:context:)
      )

    case "RecordTrades":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TradesRequest>(),
        responseSerializer: ProtobufSerializer<TradesResponse>(),
        interceptors: self.interceptors?.makeRecordTradesInterceptors() ?? [],
        userFunction: self.recordTrades(request:context:)
      )

    case "RequestSettlement":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SettlementRequest>(),
        responseSerializer: ProtobufSerializer<SettlementResponse>(),
        interceptors: self.interceptors?.makeRequestSettlementInterceptors() ?? [],
        userFunction: self.requestSettlement(request:context:)
      )

    case "CloseChannel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CloseChannelRequest>(),
        responseSerializer: ProtobufSerializer<CloseChannelResponse>(),
        interceptors: self.interceptors?.makeCloseChannelInterceptors() ?? [],
        userFunction: self.closeChannel(request:context:)
      )

    case "SubscribeChannelsEvents":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SubscribeRequest>(),
        responseSerializer: ProtobufSerializer<Notification>(),
        interceptors: self.interceptors?.makeSubscribeChannelsEventsInterceptors() ?? [],
        userFunction: self.subscribeChannelsEvents(request:context:)
      )

    default:
      return nil
    }
  }
}

/// protolint:disable MAX_LINE_LENGTH
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol OperatorAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: OperatorServerInterceptorFactoryProtocol? { get }

  func getVersion(
    request: VersionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> VersionResponse

  func getChallenge(
    request: GetChallengeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> GetChallengeResponse

  func authenticate(
    request: AuthenticateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> AuthenticateResponse

  func openChannel(
    request: OpenChannelRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> OpenChannelResponse

  func getChannelJwt(
    request: GetJwtRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> GetJwtResponse

  func getPositions(
    request: GetPositionsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> GetPositionsResponse

  func recordTrade(
    request: TradeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> TradeResponse

  func recordTrades(
    request: TradesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> TradesResponse

  func requestSettlement(
    request: SettlementRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SettlementResponse

  func closeChannel(
    request: CloseChannelRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CloseChannelResponse

  func subscribeChannelsEvents(
    request: SubscribeRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Notification>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension OperatorAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return OperatorServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return OperatorServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: OperatorServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetVersion":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<VersionRequest>(),
        responseSerializer: ProtobufSerializer<VersionResponse>(),
        interceptors: self.interceptors?.makeGetVersionInterceptors() ?? [],
        wrapping: { try await self.getVersion(request: $0, context: $1) }
      )

    case "GetChallenge":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetChallengeRequest>(),
        responseSerializer: ProtobufSerializer<GetChallengeResponse>(),
        interceptors: self.interceptors?.makeGetChallengeInterceptors() ?? [],
        wrapping: { try await self.getChallenge(request: $0, context: $1) }
      )

    case "Authenticate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<AuthenticateRequest>(),
        responseSerializer: ProtobufSerializer<AuthenticateResponse>(),
        interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? [],
        wrapping: { try await self.authenticate(request: $0, context: $1) }
      )

    case "OpenChannel":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OpenChannelRequest>(),
        responseSerializer: ProtobufSerializer<OpenChannelResponse>(),
        interceptors: self.interceptors?.makeOpenChannelInterceptors() ?? [],
        wrapping: { try await self.openChannel(request: $0, context: $1) }
      )

    case "GetChannelJwt":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetJwtRequest>(),
        responseSerializer: ProtobufSerializer<GetJwtResponse>(),
        interceptors: self.interceptors?.makeGetChannelJwtInterceptors() ?? [],
        wrapping: { try await self.getChannelJwt(request: $0, context: $1) }
      )

    case "GetPositions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetPositionsRequest>(),
        responseSerializer: ProtobufSerializer<GetPositionsResponse>(),
        interceptors: self.interceptors?.makeGetPositionsInterceptors() ?? [],
        wrapping: { try await self.getPositions(request: $0, context: $1) }
      )

    case "RecordTrade":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TradeRequest>(),
        responseSerializer: ProtobufSerializer<TradeResponse>(),
        interceptors: self.interceptors?.makeRecordTradeInterceptors() ?? [],
        wrapping: { try await self.recordTrade(request: $0, context: $1) }
      )

    case "RecordTrades":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TradesRequest>(),
        responseSerializer: ProtobufSerializer<TradesResponse>(),
        interceptors: self.interceptors?.makeRecordTradesInterceptors() ?? [],
        wrapping: { try await self.recordTrades(request: $0, context: $1) }
      )

    case "RequestSettlement":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SettlementRequest>(),
        responseSerializer: ProtobufSerializer<SettlementResponse>(),
        interceptors: self.interceptors?.makeRequestSettlementInterceptors() ?? [],
        wrapping: { try await self.requestSettlement(request: $0, context: $1) }
      )

    case "CloseChannel":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CloseChannelRequest>(),
        responseSerializer: ProtobufSerializer<CloseChannelResponse>(),
        interceptors: self.interceptors?.makeCloseChannelInterceptors() ?? [],
        wrapping: { try await self.closeChannel(request: $0, context: $1) }
      )

    case "SubscribeChannelsEvents":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SubscribeRequest>(),
        responseSerializer: ProtobufSerializer<Notification>(),
        interceptors: self.interceptors?.makeSubscribeChannelsEventsInterceptors() ?? [],
        wrapping: { try await self.subscribeChannelsEvents(request: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

public protocol OperatorServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getVersion'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetVersionInterceptors() -> [ServerInterceptor<VersionRequest, VersionResponse>]

  /// - Returns: Interceptors to use when handling 'getChallenge'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetChallengeInterceptors() -> [ServerInterceptor<GetChallengeRequest, GetChallengeResponse>]

  /// - Returns: Interceptors to use when handling 'authenticate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateInterceptors() -> [ServerInterceptor<AuthenticateRequest, AuthenticateResponse>]

  /// - Returns: Interceptors to use when handling 'openChannel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOpenChannelInterceptors() -> [ServerInterceptor<OpenChannelRequest, OpenChannelResponse>]

  /// - Returns: Interceptors to use when handling 'getChannelJwt'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetChannelJwtInterceptors() -> [ServerInterceptor<GetJwtRequest, GetJwtResponse>]

  /// - Returns: Interceptors to use when handling 'getPositions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPositionsInterceptors() -> [ServerInterceptor<GetPositionsRequest, GetPositionsResponse>]

  /// - Returns: Interceptors to use when handling 'recordTrade'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecordTradeInterceptors() -> [ServerInterceptor<TradeRequest, TradeResponse>]

  /// - Returns: Interceptors to use when handling 'recordTrades'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecordTradesInterceptors() -> [ServerInterceptor<TradesRequest, TradesResponse>]

  /// - Returns: Interceptors to use when handling 'requestSettlement'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestSettlementInterceptors() -> [ServerInterceptor<SettlementRequest, SettlementResponse>]

  /// - Returns: Interceptors to use when handling 'closeChannel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCloseChannelInterceptors() -> [ServerInterceptor<CloseChannelRequest, CloseChannelResponse>]

  /// - Returns: Interceptors to use when handling 'subscribeChannelsEvents'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeChannelsEventsInterceptors() -> [ServerInterceptor<SubscribeRequest, Notification>]
}

public enum OperatorServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Operator",
    fullName: "Operator",
    methods: [
      OperatorServerMetadata.Methods.getVersion,
      OperatorServerMetadata.Methods.getChallenge,
      OperatorServerMetadata.Methods.authenticate,
      OperatorServerMetadata.Methods.openChannel,
      OperatorServerMetadata.Methods.getChannelJwt,
      OperatorServerMetadata.Methods.getPositions,
      OperatorServerMetadata.Methods.recordTrade,
      OperatorServerMetadata.Methods.recordTrades,
      OperatorServerMetadata.Methods.requestSettlement,
      OperatorServerMetadata.Methods.closeChannel,
      OperatorServerMetadata.Methods.subscribeChannelsEvents,
    ]
  )

  public enum Methods {
    public static let getVersion = GRPCMethodDescriptor(
      name: "GetVersion",
      path: "/Operator/GetVersion",
      type: GRPCCallType.unary
    )

    public static let getChallenge = GRPCMethodDescriptor(
      name: "GetChallenge",
      path: "/Operator/GetChallenge",
      type: GRPCCallType.unary
    )

    public static let authenticate = GRPCMethodDescriptor(
      name: "Authenticate",
      path: "/Operator/Authenticate",
      type: GRPCCallType.unary
    )

    public static let openChannel = GRPCMethodDescriptor(
      name: "OpenChannel",
      path: "/Operator/OpenChannel",
      type: GRPCCallType.unary
    )

    public static let getChannelJwt = GRPCMethodDescriptor(
      name: "GetChannelJwt",
      path: "/Operator/GetChannelJwt",
      type: GRPCCallType.unary
    )

    public static let getPositions = GRPCMethodDescriptor(
      name: "GetPositions",
      path: "/Operator/GetPositions",
      type: GRPCCallType.unary
    )

    public static let recordTrade = GRPCMethodDescriptor(
      name: "RecordTrade",
      path: "/Operator/RecordTrade",
      type: GRPCCallType.unary
    )

    public static let recordTrades = GRPCMethodDescriptor(
      name: "RecordTrades",
      path: "/Operator/RecordTrades",
      type: GRPCCallType.unary
    )

    public static let requestSettlement = GRPCMethodDescriptor(
      name: "RequestSettlement",
      path: "/Operator/RequestSettlement",
      type: GRPCCallType.unary
    )

    public static let closeChannel = GRPCMethodDescriptor(
      name: "CloseChannel",
      path: "/Operator/CloseChannel",
      type: GRPCCallType.unary
    )

    public static let subscribeChannelsEvents = GRPCMethodDescriptor(
      name: "SubscribeChannelsEvents",
      path: "/Operator/SubscribeChannelsEvents",
      type: GRPCCallType.serverStreaming
    )
  }
}
