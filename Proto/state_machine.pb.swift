// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: state_machine.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum StateMachine_ClearingSMState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0
  case `default` // = 1
  case instantiating // = 2
  case accepted // = 3
  case failed // = 4
  case initiatorFunded // = 5
  case funded // = 6
  case preOpChallenging // = 7
  case pendingPreOpChallengeRegistered // = 8
  case preOpChallengeRegistered // = 9
  case operational // = 10
  case processingMarginCall // = 11
  case activeSettlement // = 12
  case processingPostSettlementMargin // = 13
  case challenging // = 14
  case pendingChallengeRegistered // = 15
  case challengeRegistered // = 16
  case finalizing // = 17
  case withdrawing // = 18
  case concluding // = 19
  case final // = 20
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .default
    case 2: self = .instantiating
    case 3: self = .accepted
    case 4: self = .failed
    case 5: self = .initiatorFunded
    case 6: self = .funded
    case 7: self = .preOpChallenging
    case 8: self = .pendingPreOpChallengeRegistered
    case 9: self = .preOpChallengeRegistered
    case 10: self = .operational
    case 11: self = .processingMarginCall
    case 12: self = .activeSettlement
    case 13: self = .processingPostSettlementMargin
    case 14: self = .challenging
    case 15: self = .pendingChallengeRegistered
    case 16: self = .challengeRegistered
    case 17: self = .finalizing
    case 18: self = .withdrawing
    case 19: self = .concluding
    case 20: self = .final
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .default: return 1
    case .instantiating: return 2
    case .accepted: return 3
    case .failed: return 4
    case .initiatorFunded: return 5
    case .funded: return 6
    case .preOpChallenging: return 7
    case .pendingPreOpChallengeRegistered: return 8
    case .preOpChallengeRegistered: return 9
    case .operational: return 10
    case .processingMarginCall: return 11
    case .activeSettlement: return 12
    case .processingPostSettlementMargin: return 13
    case .challenging: return 14
    case .pendingChallengeRegistered: return 15
    case .challengeRegistered: return 16
    case .finalizing: return 17
    case .withdrawing: return 18
    case .concluding: return 19
    case .final: return 20
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [StateMachine_ClearingSMState] = [
    .unspecified,
    .default,
    .instantiating,
    .accepted,
    .failed,
    .initiatorFunded,
    .funded,
    .preOpChallenging,
    .pendingPreOpChallengeRegistered,
    .preOpChallengeRegistered,
    .operational,
    .processingMarginCall,
    .activeSettlement,
    .processingPostSettlementMargin,
    .challenging,
    .pendingChallengeRegistered,
    .challengeRegistered,
    .finalizing,
    .withdrawing,
    .concluding,
    .final,
  ]

}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension StateMachine_ClearingSMState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CLEARING_SMSTATE_UNSPECIFIED"),
    1: .same(proto: "CLEARING_SMSTATE_DEFAULT"),
    2: .same(proto: "CLEARING_SMSTATE_INSTANTIATING"),
    3: .same(proto: "CLEARING_SMSTATE_ACCEPTED"),
    4: .same(proto: "CLEARING_SMSTATE_FAILED"),
    5: .same(proto: "CLEARING_SMSTATE_INITIATOR_FUNDED"),
    6: .same(proto: "CLEARING_SMSTATE_FUNDED"),
    7: .same(proto: "CLEARING_SMSTATE_PRE_OP_CHALLENGING"),
    8: .same(proto: "CLEARING_SMSTATE_PENDING_PRE_OP_CHALLENGE_REGISTERED"),
    9: .same(proto: "CLEARING_SMSTATE_PRE_OP_CHALLENGE_REGISTERED"),
    10: .same(proto: "CLEARING_SMSTATE_OPERATIONAL"),
    11: .same(proto: "CLEARING_SMSTATE_PROCESSING_MARGIN_CALL"),
    12: .same(proto: "CLEARING_SMSTATE_ACTIVE_SETTLEMENT"),
    13: .same(proto: "CLEARING_SMSTATE_PROCESSING_POST_SETTLEMENT_MARGIN"),
    14: .same(proto: "CLEARING_SMSTATE_CHALLENGING"),
    15: .same(proto: "CLEARING_SMSTATE_PENDING_CHALLENGE_REGISTERED"),
    16: .same(proto: "CLEARING_SMSTATE_CHALLENGE_REGISTERED"),
    17: .same(proto: "CLEARING_SMSTATE_FINALIZING"),
    18: .same(proto: "CLEARING_SMSTATE_WITHDRAWING"),
    19: .same(proto: "CLEARING_SMSTATE_CONCLUDING"),
    20: .same(proto: "CLEARING_SMSTATE_FINAL"),
  ]
}
