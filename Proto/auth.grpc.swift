//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: auth.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Auth_AuthClient`, then call methods of this protocol to make API calls.
public protocol Auth_AuthClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Auth_AuthClientInterceptorFactoryProtocol? { get }

  func getChallenge(
    _ request: Auth_ChallengeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth_ChallengeRequest, Auth_ChallengeResponse>

  func authenticate(
    _ request: Auth_SignedChallenge,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth_SignedChallenge, Auth_AuthToken>

  func tokenRefresh(
    _ request: Auth_AuthToken,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth_AuthToken, Auth_AuthToken>

  func signout(
    _ request: Auth_AuthToken,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth_AuthToken, Auth_SignoutResponse>
}

extension Auth_AuthClientProtocol {
  public var serviceName: String {
    return "auth.Auth"
  }

  /// Unary call to GetChallenge
  ///
  /// - Parameters:
  ///   - request: Request to send to GetChallenge.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getChallenge(
    _ request: Auth_ChallengeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth_ChallengeRequest, Auth_ChallengeResponse> {
    return self.makeUnaryCall(
      path: Auth_AuthClientMetadata.Methods.getChallenge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChallengeInterceptors() ?? []
    )
  }

  /// Unary call to Authenticate
  ///
  /// - Parameters:
  ///   - request: Request to send to Authenticate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func authenticate(
    _ request: Auth_SignedChallenge,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth_SignedChallenge, Auth_AuthToken> {
    return self.makeUnaryCall(
      path: Auth_AuthClientMetadata.Methods.authenticate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? []
    )
  }

  /// Unary call to TokenRefresh
  ///
  /// - Parameters:
  ///   - request: Request to send to TokenRefresh.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func tokenRefresh(
    _ request: Auth_AuthToken,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth_AuthToken, Auth_AuthToken> {
    return self.makeUnaryCall(
      path: Auth_AuthClientMetadata.Methods.tokenRefresh.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokenRefreshInterceptors() ?? []
    )
  }

  /// Unary call to Signout
  ///
  /// - Parameters:
  ///   - request: Request to send to Signout.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func signout(
    _ request: Auth_AuthToken,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth_AuthToken, Auth_SignoutResponse> {
    return self.makeUnaryCall(
      path: Auth_AuthClientMetadata.Methods.signout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignoutInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Auth_AuthClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Auth_AuthNIOClient")
public final class Auth_AuthClient: Auth_AuthClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Auth_AuthClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Auth_AuthClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the auth.Auth service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Auth_AuthClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Auth_AuthNIOClient: Auth_AuthClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Auth_AuthClientInterceptorFactoryProtocol?

  /// Creates a client for the auth.Auth service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Auth_AuthClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Auth_AuthAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Auth_AuthClientInterceptorFactoryProtocol? { get }

  func makeGetChallengeCall(
    _ request: Auth_ChallengeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Auth_ChallengeRequest, Auth_ChallengeResponse>

  func makeAuthenticateCall(
    _ request: Auth_SignedChallenge,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Auth_SignedChallenge, Auth_AuthToken>

  func makeTokenRefreshCall(
    _ request: Auth_AuthToken,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Auth_AuthToken, Auth_AuthToken>

  func makeSignoutCall(
    _ request: Auth_AuthToken,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Auth_AuthToken, Auth_SignoutResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Auth_AuthAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Auth_AuthClientMetadata.serviceDescriptor
  }

  public var interceptors: Auth_AuthClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetChallengeCall(
    _ request: Auth_ChallengeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Auth_ChallengeRequest, Auth_ChallengeResponse> {
    return self.makeAsyncUnaryCall(
      path: Auth_AuthClientMetadata.Methods.getChallenge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChallengeInterceptors() ?? []
    )
  }

  public func makeAuthenticateCall(
    _ request: Auth_SignedChallenge,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Auth_SignedChallenge, Auth_AuthToken> {
    return self.makeAsyncUnaryCall(
      path: Auth_AuthClientMetadata.Methods.authenticate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? []
    )
  }

  public func makeTokenRefreshCall(
    _ request: Auth_AuthToken,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Auth_AuthToken, Auth_AuthToken> {
    return self.makeAsyncUnaryCall(
      path: Auth_AuthClientMetadata.Methods.tokenRefresh.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokenRefreshInterceptors() ?? []
    )
  }

  public func makeSignoutCall(
    _ request: Auth_AuthToken,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Auth_AuthToken, Auth_SignoutResponse> {
    return self.makeAsyncUnaryCall(
      path: Auth_AuthClientMetadata.Methods.signout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignoutInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Auth_AuthAsyncClientProtocol {
  public func getChallenge(
    _ request: Auth_ChallengeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Auth_ChallengeResponse {
    return try await self.performAsyncUnaryCall(
      path: Auth_AuthClientMetadata.Methods.getChallenge.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChallengeInterceptors() ?? []
    )
  }

  public func authenticate(
    _ request: Auth_SignedChallenge,
    callOptions: CallOptions? = nil
  ) async throws -> Auth_AuthToken {
    return try await self.performAsyncUnaryCall(
      path: Auth_AuthClientMetadata.Methods.authenticate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? []
    )
  }

  public func tokenRefresh(
    _ request: Auth_AuthToken,
    callOptions: CallOptions? = nil
  ) async throws -> Auth_AuthToken {
    return try await self.performAsyncUnaryCall(
      path: Auth_AuthClientMetadata.Methods.tokenRefresh.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTokenRefreshInterceptors() ?? []
    )
  }

  public func signout(
    _ request: Auth_AuthToken,
    callOptions: CallOptions? = nil
  ) async throws -> Auth_SignoutResponse {
    return try await self.performAsyncUnaryCall(
      path: Auth_AuthClientMetadata.Methods.signout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignoutInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Auth_AuthAsyncClient: Auth_AuthAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Auth_AuthClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Auth_AuthClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Auth_AuthClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getChallenge'.
  func makeGetChallengeInterceptors() -> [ClientInterceptor<Auth_ChallengeRequest, Auth_ChallengeResponse>]

  /// - Returns: Interceptors to use when invoking 'authenticate'.
  func makeAuthenticateInterceptors() -> [ClientInterceptor<Auth_SignedChallenge, Auth_AuthToken>]

  /// - Returns: Interceptors to use when invoking 'tokenRefresh'.
  func makeTokenRefreshInterceptors() -> [ClientInterceptor<Auth_AuthToken, Auth_AuthToken>]

  /// - Returns: Interceptors to use when invoking 'signout'.
  func makeSignoutInterceptors() -> [ClientInterceptor<Auth_AuthToken, Auth_SignoutResponse>]
}

public enum Auth_AuthClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Auth",
    fullName: "auth.Auth",
    methods: [
      Auth_AuthClientMetadata.Methods.getChallenge,
      Auth_AuthClientMetadata.Methods.authenticate,
      Auth_AuthClientMetadata.Methods.tokenRefresh,
      Auth_AuthClientMetadata.Methods.signout,
    ]
  )

  public enum Methods {
    public static let getChallenge = GRPCMethodDescriptor(
      name: "GetChallenge",
      path: "/auth.Auth/GetChallenge",
      type: GRPCCallType.unary
    )

    public static let authenticate = GRPCMethodDescriptor(
      name: "Authenticate",
      path: "/auth.Auth/Authenticate",
      type: GRPCCallType.unary
    )

    public static let tokenRefresh = GRPCMethodDescriptor(
      name: "TokenRefresh",
      path: "/auth.Auth/TokenRefresh",
      type: GRPCCallType.unary
    )

    public static let signout = GRPCMethodDescriptor(
      name: "Signout",
      path: "/auth.Auth/Signout",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Auth_AuthProvider: CallHandlerProvider {
  var interceptors: Auth_AuthServerInterceptorFactoryProtocol? { get }

  func getChallenge(request: Auth_ChallengeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Auth_ChallengeResponse>

  func authenticate(request: Auth_SignedChallenge, context: StatusOnlyCallContext) -> EventLoopFuture<Auth_AuthToken>

  func tokenRefresh(request: Auth_AuthToken, context: StatusOnlyCallContext) -> EventLoopFuture<Auth_AuthToken>

  func signout(request: Auth_AuthToken, context: StatusOnlyCallContext) -> EventLoopFuture<Auth_SignoutResponse>
}

extension Auth_AuthProvider {
  public var serviceName: Substring {
    return Auth_AuthServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetChallenge":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth_ChallengeRequest>(),
        responseSerializer: ProtobufSerializer<Auth_ChallengeResponse>(),
        interceptors: self.interceptors?.makeGetChallengeInterceptors() ?? [],
        userFunction: self.getChallenge(request:context:)
      )

    case "Authenticate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth_SignedChallenge>(),
        responseSerializer: ProtobufSerializer<Auth_AuthToken>(),
        interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? [],
        userFunction: self.authenticate(request:context:)
      )

    case "TokenRefresh":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth_AuthToken>(),
        responseSerializer: ProtobufSerializer<Auth_AuthToken>(),
        interceptors: self.interceptors?.makeTokenRefreshInterceptors() ?? [],
        userFunction: self.tokenRefresh(request:context:)
      )

    case "Signout":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth_AuthToken>(),
        responseSerializer: ProtobufSerializer<Auth_SignoutResponse>(),
        interceptors: self.interceptors?.makeSignoutInterceptors() ?? [],
        userFunction: self.signout(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Auth_AuthAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Auth_AuthServerInterceptorFactoryProtocol? { get }

  func getChallenge(
    request: Auth_ChallengeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Auth_ChallengeResponse

  func authenticate(
    request: Auth_SignedChallenge,
    context: GRPCAsyncServerCallContext
  ) async throws -> Auth_AuthToken

  func tokenRefresh(
    request: Auth_AuthToken,
    context: GRPCAsyncServerCallContext
  ) async throws -> Auth_AuthToken

  func signout(
    request: Auth_AuthToken,
    context: GRPCAsyncServerCallContext
  ) async throws -> Auth_SignoutResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Auth_AuthAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Auth_AuthServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Auth_AuthServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Auth_AuthServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetChallenge":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth_ChallengeRequest>(),
        responseSerializer: ProtobufSerializer<Auth_ChallengeResponse>(),
        interceptors: self.interceptors?.makeGetChallengeInterceptors() ?? [],
        wrapping: { try await self.getChallenge(request: $0, context: $1) }
      )

    case "Authenticate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth_SignedChallenge>(),
        responseSerializer: ProtobufSerializer<Auth_AuthToken>(),
        interceptors: self.interceptors?.makeAuthenticateInterceptors() ?? [],
        wrapping: { try await self.authenticate(request: $0, context: $1) }
      )

    case "TokenRefresh":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth_AuthToken>(),
        responseSerializer: ProtobufSerializer<Auth_AuthToken>(),
        interceptors: self.interceptors?.makeTokenRefreshInterceptors() ?? [],
        wrapping: { try await self.tokenRefresh(request: $0, context: $1) }
      )

    case "Signout":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth_AuthToken>(),
        responseSerializer: ProtobufSerializer<Auth_SignoutResponse>(),
        interceptors: self.interceptors?.makeSignoutInterceptors() ?? [],
        wrapping: { try await self.signout(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Auth_AuthServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getChallenge'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetChallengeInterceptors() -> [ServerInterceptor<Auth_ChallengeRequest, Auth_ChallengeResponse>]

  /// - Returns: Interceptors to use when handling 'authenticate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthenticateInterceptors() -> [ServerInterceptor<Auth_SignedChallenge, Auth_AuthToken>]

  /// - Returns: Interceptors to use when handling 'tokenRefresh'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTokenRefreshInterceptors() -> [ServerInterceptor<Auth_AuthToken, Auth_AuthToken>]

  /// - Returns: Interceptors to use when handling 'signout'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignoutInterceptors() -> [ServerInterceptor<Auth_AuthToken, Auth_SignoutResponse>]
}

public enum Auth_AuthServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Auth",
    fullName: "auth.Auth",
    methods: [
      Auth_AuthServerMetadata.Methods.getChallenge,
      Auth_AuthServerMetadata.Methods.authenticate,
      Auth_AuthServerMetadata.Methods.tokenRefresh,
      Auth_AuthServerMetadata.Methods.signout,
    ]
  )

  public enum Methods {
    public static let getChallenge = GRPCMethodDescriptor(
      name: "GetChallenge",
      path: "/auth.Auth/GetChallenge",
      type: GRPCCallType.unary
    )

    public static let authenticate = GRPCMethodDescriptor(
      name: "Authenticate",
      path: "/auth.Auth/Authenticate",
      type: GRPCCallType.unary
    )

    public static let tokenRefresh = GRPCMethodDescriptor(
      name: "TokenRefresh",
      path: "/auth.Auth/TokenRefresh",
      type: GRPCCallType.unary
    )

    public static let signout = GRPCMethodDescriptor(
      name: "Signout",
      path: "/auth.Auth/Signout",
      type: GRPCCallType.unary
    )
  }
}
