//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: escrow.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Escrow Service definition
/// In the protocol, Client is the Initiator, Server is the Follower
/// Initiator start with turnNum = 0 prefunding stage.
///
/// Usage: instantiate `EscrowChannelClient`, then call methods of this protocol to make API calls.
public protocol EscrowChannelClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: EscrowChannelClientInterceptorFactoryProtocol? { get }

  func prefund(
    _ request: EscrowState,
    callOptions: CallOptions?
  ) -> UnaryCall<EscrowState, EscrowState>

  func postfund(
    _ request: EscrowState,
    callOptions: CallOptions?
  ) -> UnaryCall<EscrowState, EscrowState>

  func execute(
    _ request: EscrowState,
    callOptions: CallOptions?
  ) -> UnaryCall<EscrowState, EscrowState>

  func finalize(
    _ request: EscrowState,
    callOptions: CallOptions?
  ) -> UnaryCall<EscrowState, EscrowState>
}

extension EscrowChannelClientProtocol {
  public var serviceName: String {
    return "EscrowChannel"
  }

  /// turnNum = 0
  ///
  /// - Parameters:
  ///   - request: Request to send to Prefund.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func prefund(
    _ request: EscrowState,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EscrowState, EscrowState> {
    return self.makeUnaryCall(
      path: EscrowChannelClientMetadata.Methods.prefund.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrefundInterceptors() ?? []
    )
  }

  /// turnNum = 1
  ///
  /// - Parameters:
  ///   - request: Request to send to Postfund.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func postfund(
    _ request: EscrowState,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EscrowState, EscrowState> {
    return self.makeUnaryCall(
      path: EscrowChannelClientMetadata.Methods.postfund.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePostfundInterceptors() ?? []
    )
  }

  /// turnNum = 2
  ///
  /// - Parameters:
  ///   - request: Request to send to Execute.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func execute(
    _ request: EscrowState,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EscrowState, EscrowState> {
    return self.makeUnaryCall(
      path: EscrowChannelClientMetadata.Methods.execute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteInterceptors() ?? []
    )
  }

  /// isFinal State
  ///
  /// - Parameters:
  ///   - request: Request to send to Finalize.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func finalize(
    _ request: EscrowState,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EscrowState, EscrowState> {
    return self.makeUnaryCall(
      path: EscrowChannelClientMetadata.Methods.finalize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizeInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension EscrowChannelClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "EscrowChannelNIOClient")
public final class EscrowChannelClient: EscrowChannelClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: EscrowChannelClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: EscrowChannelClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the EscrowChannel service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: EscrowChannelClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct EscrowChannelNIOClient: EscrowChannelClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: EscrowChannelClientInterceptorFactoryProtocol?

  /// Creates a client for the EscrowChannel service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: EscrowChannelClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Escrow Service definition
/// In the protocol, Client is the Initiator, Server is the Follower
/// Initiator start with turnNum = 0 prefunding stage.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol EscrowChannelAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: EscrowChannelClientInterceptorFactoryProtocol? { get }

  func makePrefundCall(
    _ request: EscrowState,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EscrowState, EscrowState>

  func makePostfundCall(
    _ request: EscrowState,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EscrowState, EscrowState>

  func makeExecuteCall(
    _ request: EscrowState,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EscrowState, EscrowState>

  func makeFinalizeCall(
    _ request: EscrowState,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EscrowState, EscrowState>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EscrowChannelAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return EscrowChannelClientMetadata.serviceDescriptor
  }

  public var interceptors: EscrowChannelClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePrefundCall(
    _ request: EscrowState,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EscrowState, EscrowState> {
    return self.makeAsyncUnaryCall(
      path: EscrowChannelClientMetadata.Methods.prefund.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrefundInterceptors() ?? []
    )
  }

  public func makePostfundCall(
    _ request: EscrowState,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EscrowState, EscrowState> {
    return self.makeAsyncUnaryCall(
      path: EscrowChannelClientMetadata.Methods.postfund.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePostfundInterceptors() ?? []
    )
  }

  public func makeExecuteCall(
    _ request: EscrowState,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EscrowState, EscrowState> {
    return self.makeAsyncUnaryCall(
      path: EscrowChannelClientMetadata.Methods.execute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteInterceptors() ?? []
    )
  }

  public func makeFinalizeCall(
    _ request: EscrowState,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EscrowState, EscrowState> {
    return self.makeAsyncUnaryCall(
      path: EscrowChannelClientMetadata.Methods.finalize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EscrowChannelAsyncClientProtocol {
  public func prefund(
    _ request: EscrowState,
    callOptions: CallOptions? = nil
  ) async throws -> EscrowState {
    return try await self.performAsyncUnaryCall(
      path: EscrowChannelClientMetadata.Methods.prefund.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePrefundInterceptors() ?? []
    )
  }

  public func postfund(
    _ request: EscrowState,
    callOptions: CallOptions? = nil
  ) async throws -> EscrowState {
    return try await self.performAsyncUnaryCall(
      path: EscrowChannelClientMetadata.Methods.postfund.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePostfundInterceptors() ?? []
    )
  }

  public func execute(
    _ request: EscrowState,
    callOptions: CallOptions? = nil
  ) async throws -> EscrowState {
    return try await self.performAsyncUnaryCall(
      path: EscrowChannelClientMetadata.Methods.execute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecuteInterceptors() ?? []
    )
  }

  public func finalize(
    _ request: EscrowState,
    callOptions: CallOptions? = nil
  ) async throws -> EscrowState {
    return try await self.performAsyncUnaryCall(
      path: EscrowChannelClientMetadata.Methods.finalize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFinalizeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct EscrowChannelAsyncClient: EscrowChannelAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: EscrowChannelClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: EscrowChannelClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol EscrowChannelClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'prefund'.
  func makePrefundInterceptors() -> [ClientInterceptor<EscrowState, EscrowState>]

  /// - Returns: Interceptors to use when invoking 'postfund'.
  func makePostfundInterceptors() -> [ClientInterceptor<EscrowState, EscrowState>]

  /// - Returns: Interceptors to use when invoking 'execute'.
  func makeExecuteInterceptors() -> [ClientInterceptor<EscrowState, EscrowState>]

  /// - Returns: Interceptors to use when invoking 'finalize'.
  func makeFinalizeInterceptors() -> [ClientInterceptor<EscrowState, EscrowState>]
}

public enum EscrowChannelClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "EscrowChannel",
    fullName: "EscrowChannel",
    methods: [
      EscrowChannelClientMetadata.Methods.prefund,
      EscrowChannelClientMetadata.Methods.postfund,
      EscrowChannelClientMetadata.Methods.execute,
      EscrowChannelClientMetadata.Methods.finalize,
    ]
  )

  public enum Methods {
    public static let prefund = GRPCMethodDescriptor(
      name: "Prefund",
      path: "/EscrowChannel/Prefund",
      type: GRPCCallType.unary
    )

    public static let postfund = GRPCMethodDescriptor(
      name: "Postfund",
      path: "/EscrowChannel/Postfund",
      type: GRPCCallType.unary
    )

    public static let execute = GRPCMethodDescriptor(
      name: "Execute",
      path: "/EscrowChannel/Execute",
      type: GRPCCallType.unary
    )

    public static let finalize = GRPCMethodDescriptor(
      name: "Finalize",
      path: "/EscrowChannel/Finalize",
      type: GRPCCallType.unary
    )
  }
}

/// Escrow Service definition
/// In the protocol, Client is the Initiator, Server is the Follower
/// Initiator start with turnNum = 0 prefunding stage.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol EscrowChannelProvider: CallHandlerProvider {
  var interceptors: EscrowChannelServerInterceptorFactoryProtocol? { get }

  /// turnNum = 0
  func prefund(request: EscrowState, context: StatusOnlyCallContext) -> EventLoopFuture<EscrowState>

  /// turnNum = 1
  func postfund(request: EscrowState, context: StatusOnlyCallContext) -> EventLoopFuture<EscrowState>

  /// turnNum = 2
  func execute(request: EscrowState, context: StatusOnlyCallContext) -> EventLoopFuture<EscrowState>

  /// isFinal State
  func finalize(request: EscrowState, context: StatusOnlyCallContext) -> EventLoopFuture<EscrowState>
}

extension EscrowChannelProvider {
  public var serviceName: Substring {
    return EscrowChannelServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Prefund":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EscrowState>(),
        responseSerializer: ProtobufSerializer<EscrowState>(),
        interceptors: self.interceptors?.makePrefundInterceptors() ?? [],
        userFunction: self.prefund(request:context:)
      )

    case "Postfund":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EscrowState>(),
        responseSerializer: ProtobufSerializer<EscrowState>(),
        interceptors: self.interceptors?.makePostfundInterceptors() ?? [],
        userFunction: self.postfund(request:context:)
      )

    case "Execute":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EscrowState>(),
        responseSerializer: ProtobufSerializer<EscrowState>(),
        interceptors: self.interceptors?.makeExecuteInterceptors() ?? [],
        userFunction: self.execute(request:context:)
      )

    case "Finalize":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EscrowState>(),
        responseSerializer: ProtobufSerializer<EscrowState>(),
        interceptors: self.interceptors?.makeFinalizeInterceptors() ?? [],
        userFunction: self.finalize(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Escrow Service definition
/// In the protocol, Client is the Initiator, Server is the Follower
/// Initiator start with turnNum = 0 prefunding stage.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol EscrowChannelAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: EscrowChannelServerInterceptorFactoryProtocol? { get }

  /// turnNum = 0
  func prefund(
    request: EscrowState,
    context: GRPCAsyncServerCallContext
  ) async throws -> EscrowState

  /// turnNum = 1
  func postfund(
    request: EscrowState,
    context: GRPCAsyncServerCallContext
  ) async throws -> EscrowState

  /// turnNum = 2
  func execute(
    request: EscrowState,
    context: GRPCAsyncServerCallContext
  ) async throws -> EscrowState

  /// isFinal State
  func finalize(
    request: EscrowState,
    context: GRPCAsyncServerCallContext
  ) async throws -> EscrowState
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EscrowChannelAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return EscrowChannelServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return EscrowChannelServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: EscrowChannelServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Prefund":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EscrowState>(),
        responseSerializer: ProtobufSerializer<EscrowState>(),
        interceptors: self.interceptors?.makePrefundInterceptors() ?? [],
        wrapping: { try await self.prefund(request: $0, context: $1) }
      )

    case "Postfund":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EscrowState>(),
        responseSerializer: ProtobufSerializer<EscrowState>(),
        interceptors: self.interceptors?.makePostfundInterceptors() ?? [],
        wrapping: { try await self.postfund(request: $0, context: $1) }
      )

    case "Execute":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EscrowState>(),
        responseSerializer: ProtobufSerializer<EscrowState>(),
        interceptors: self.interceptors?.makeExecuteInterceptors() ?? [],
        wrapping: { try await self.execute(request: $0, context: $1) }
      )

    case "Finalize":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EscrowState>(),
        responseSerializer: ProtobufSerializer<EscrowState>(),
        interceptors: self.interceptors?.makeFinalizeInterceptors() ?? [],
        wrapping: { try await self.finalize(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol EscrowChannelServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'prefund'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePrefundInterceptors() -> [ServerInterceptor<EscrowState, EscrowState>]

  /// - Returns: Interceptors to use when handling 'postfund'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePostfundInterceptors() -> [ServerInterceptor<EscrowState, EscrowState>]

  /// - Returns: Interceptors to use when handling 'execute'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExecuteInterceptors() -> [ServerInterceptor<EscrowState, EscrowState>]

  /// - Returns: Interceptors to use when handling 'finalize'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFinalizeInterceptors() -> [ServerInterceptor<EscrowState, EscrowState>]
}

public enum EscrowChannelServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "EscrowChannel",
    fullName: "EscrowChannel",
    methods: [
      EscrowChannelServerMetadata.Methods.prefund,
      EscrowChannelServerMetadata.Methods.postfund,
      EscrowChannelServerMetadata.Methods.execute,
      EscrowChannelServerMetadata.Methods.finalize,
    ]
  )

  public enum Methods {
    public static let prefund = GRPCMethodDescriptor(
      name: "Prefund",
      path: "/EscrowChannel/Prefund",
      type: GRPCCallType.unary
    )

    public static let postfund = GRPCMethodDescriptor(
      name: "Postfund",
      path: "/EscrowChannel/Postfund",
      type: GRPCCallType.unary
    )

    public static let execute = GRPCMethodDescriptor(
      name: "Execute",
      path: "/EscrowChannel/Execute",
      type: GRPCCallType.unary
    )

    public static let finalize = GRPCMethodDescriptor(
      name: "Finalize",
      path: "/EscrowChannel/Finalize",
      type: GRPCCallType.unary
    )
  }
}
